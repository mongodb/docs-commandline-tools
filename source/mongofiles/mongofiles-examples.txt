.. _mongofiles-examples:

=====================
mongofiles Examples
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. facet::
   :name: programming_language
   :values: shell

.. |arrow| unicode:: U+27A4
.. |tool-binary| replace:: ``mongofiles``

This page shows examples for |tool-binary|.

Run |tool-binary| from the system command line, not the 
:binary:`~bin.mongo` shell.

Return all Files in a GridFS Collection
-------------------------------------------------------------------------------

To return a list of all files in a :term:`GridFS` collection in the
``records`` database, use the following invocation at the system shell:

.. code-block:: sh

   mongofiles -d=records list

This ``mongofiles`` instance will connect to the
:binary:`~bin.mongod` instance running on the ``27017`` localhost
interface to specify the same operation on a different port or
hostname, and issue a command that resembles one of the following:

.. code-block:: sh

   mongofiles --port=37017 -d=records list
   mongofiles --host=db1.example.net -d=records list
   mongofiles --host=db1.example.net --port=37017 -d=records list

Modify any of the following commands as needed if you're connecting
the :binary:`~bin.mongod` instances on different ports or hosts.

To upload a file named ``32-corinth.lp`` to the GridFS collection in
the ``records`` database, you can use the following command:

.. code-block:: sh

   mongofiles -d=records put 32-corinth.lp

To delete the ``32-corinth.lp`` file from this GridFS collection in
the ``records`` database, you can use the following command:

.. code-block:: sh

   mongofiles -d=records delete 32-corinth.lp

To search for files in the GridFS collection in the ``records``
database that have the string ``corinth`` in their names, you can use
following command:

.. code-block:: sh

   mongofiles -d=records search corinth

To list all files in the GridFS collection in the ``records`` database
with names that begin with the string ``32``, you can use the following
command:

.. code-block:: sh

   mongofiles -d=records list 32

To fetch the file from the GridFS collection in the ``records``
database named ``32-corinth.lp``, you can use the following command:

.. code-block:: sh

   mongofiles -d=records get 32-corinth.lp

To fetch all files from the GridFS collection in the ``records``
database with names beginning with the string ``32`` and ending with the
string ``.lp``, you can use the following command:

.. code-block:: sh

   mongofiles -d=records get_regex 32*.lp

To fetch the file from the GridFS collection in the ``records`` database
with ``_id: ObjectId("56feac751f417d0357e7140f")``, you can use the
following command:

.. code-block:: sh

   mongofiles -d=records get_id '{"$oid": "56feac751f417d0357e7140f"}'

You must include quotation marks around the ``_id``.

.. _mongofiles-example-connect-using-aws-iam:

Connect to a MongoDB Atlas Cluster using AWS IAM Credentials
-------------------------------------------------------------------------------

.. versionadded:: 100.1.0

To connect to a :atlas:`MongoDB Atlas <?tck=docs_server>` cluster which
has been configured to support authentication via `AWS IAM credentials
<https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html>`__,
provide a :option:`connection string <mongofiles --uri>` to
|tool-binary| similar to the following:

.. code-block:: none

   mongofiles 'mongodb+srv://<aws access key id>:<aws secret access key>@cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS' <other options>

Connecting to Atlas using AWS IAM credentials in this manner uses the
``MONGODB-AWS`` :urioption:`authentication mechanism <authMechanism>`
and the ``$external`` :urioption:`authSource`, as shown in this example.

If using an `AWS session token
<https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html>`__,
as well, provide it with the ``AWS_SESSION_TOKEN``
:urioption:`authMechanismProperties` value, as follows:

.. code-block:: none

   mongofiles 'mongodb+srv://<aws access key id>:<aws secret access key>@cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS&authMechanismProperties=AWS_SESSION_TOKEN:<aws session token>' <other options>

.. include:: /includes/fact-pct-encode-uri.rst

Alternatively, the AWS access key ID, secret access key, and optionally
session token can each be provided outside of the connection string
using the :option:`--username <mongofiles --username>`, :option:`--password <mongofiles --password>`, and
:option:`--awsSessionToken <mongofiles --awsSessionToken>` options instead, like so:

.. code-block:: none

   mongofiles 'mongodb+srv://cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS' --username <aws access key id> --password <aws secret access key> --awsSessionToken <aws session token> <other options>

When provided as command line parameters, these three options do not
require percent encoding.

You may also set these credentials on your platform using standard
`AWS IAM environment variables
<https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html#envvars-list>`__.
|tool-binary| checks for the following environment variables when you
use the ``MONGODB-AWS``
:urioption:`authentication mechanism <authMechanism>`:

- ``AWS_ACCESS_KEY_ID``
- ``AWS_SECRET_ACCESS_KEY``
- ``AWS_SESSION_TOKEN``

If set, these credentials do not need to be specified in the connection
string or via their explicit options.

.. note::

   If you chose to use the AWS environment variables to specify these
   values, you cannot mix and match with the corresponding explicit or 
   connection string options for these credentials. Either use the
   environment variables for access key ID *and* secret access key
   (*and* session token if used), **or** specify each of these using the
   explicit or connection string options instead.

The following example sets these environment variables in the ``bash``
shell:

.. code-block:: none

   export AWS_ACCESS_KEY_ID='<aws access key id>'
   export AWS_SECRET_ACCESS_KEY='<aws secret access key>'
   export AWS_SESSION_TOKEN='<aws session token>'

Syntax for setting environment variables in other shells will be
different. Consult the documentation for your platform for more
information.

You can verify that these environment variables have been set with the
following command:

.. code-block:: none

   env | grep AWS

Once set, the following example connects to a MongoDB Atlas cluster
using these environment variables:

.. code-block:: none

   mongofiles 'mongodb+srv://cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS'  <other options>

Learn More
----------

- :ref:`mongofiles`
- :ref:`mongofiles-compatibility-and-installation`
- :ref:`mongofiles Behavior <mongofiles-behavior>`