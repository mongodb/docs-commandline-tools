.. _mongostat:

.. default-domain:: mongodb

.. binary:: mongostat

.. program:: mongostat

=============
``mongostat``
=============

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. |arrow| unicode:: U+27A4
.. |tool-binary| replace:: :binary:`~bin.mongostat`
.. |mongodb-aws-example| replace:: :ref:`mongostat-example-connect-using-aws-iam`

Synopsis
--------

The :binary:`~bin.mongostat` utility provides a quick overview of the
status of a currently running :binary:`~bin.mongod` or
:binary:`~bin.mongos` instance. :binary:`~bin.mongostat` is functionally
similar to the UNIX/Linux file system utility ``vmstat``, but provides
data regarding :binary:`~bin.mongod` and :binary:`~bin.mongos`
instances.

.. include:: /includes/extracts/require-cmd-line-mongostat.rst

Versioning
~~~~~~~~~~

.. include:: /includes/extracts/dbtools-version-single.rst

.. note:: Quick links to older documentation

   - `MongoDB 4.2 mongostat <https://docs.mongodb.com/v4.2/reference/program/mongostat>`__
   - `MongoDB 4.0 mongostat <https://docs.mongodb.com/v4.0/reference/program/mongostat>`__
   - `MongoDB 3.6 mongostat <https://docs.mongodb.com/v3.6/reference/program/mongostat>`__

This documentation is for version ``{+release+}`` of |tool-binary|. 

Compatibility
-------------

MongoDB Server Compatibility
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/dbtools-compatibility-single.rst

Platform Support
~~~~~~~~~~~~~~~~

|tool-binary| version ``{+release+}`` is supported on the following
platforms:

.. include:: /includes/fact-platform-support.rst

Installation
------------

.. include:: /includes/fact-see-install-guide.rst

Syntax
------

The :binary:`~bin.mongostat` command has the following form:

.. code-block:: sh

   mongostat <options> <connection-string> <polling interval in seconds>

.. include:: /includes/extracts/require-cmd-line-mongostat.rst

Required Access
---------------

In order to connect to a :binary:`~bin.mongod` that enforces authorization
with the :option:`--auth <mongod.--auth>` option, specify the
:option:`--username <mongostat --username>` and :option:`--password
<mongostat --password>` options, and the connecting user must have the
:authaction:`serverStatus` privilege action on the cluster resources.

The built-in role :authrole:`clusterMonitor` provides this privilege as
well as other privileges. To create a role with just the privilege to
run :binary:`~bin.mongostat`, see :ref:`create-role-for-mongostat`.

Behavior
--------

FIPS
~~~~

:binary:`~bin.mongostat` automatically creates FIPS-compliant
connections to a :binary:`~bin.mongod`/:binary:`~bin.mongos` that is
:manual:`configured to use FIPS mode </tutorial/configure-fips>`.

Options
-------

.. option:: --help

   Returns information on the options and use of :program:`mongostat`.


.. option:: --verbose, -v

   Increases the amount of internal reporting returned on standard output
   or in log files. Increase the verbosity with the ``-v`` form by
   including the option multiple times, (e.g. ``-vvvvv``.)
   


.. option:: --version

   Returns the :program:`mongostat` release number.


.. option:: --uri=<connectionString>
   
   Specifies the resolvable :manual:`URI connection string
   </reference/connection-string/>` of the MongoDB deployment, enclosed
   in quotes:
   
   .. code-block:: none
   
      --uri="mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]"
   
   .. include:: /includes/extracts/uri-positional-mongostat.rst

   For information on the components of the connection string, see
   the :manual:`Connection String URI Format
   </reference/connection-string/>` documentation. 

   .. include:: /includes/fact-uri-with-conflicting-info.rst


.. option:: --host=<hostname><:port>, -h=<hostname><:port>

   *Default*: localhost:27017

   Specifies the resolvable hostname of the MongoDB deployment. By
   default, :program:`mongostat` attempts to connect to a MongoDB
   instance running on the localhost on port number ``27017``.
   
   To connect to a replica set, you can specify the set member or
   members to report on, as in the following (see also the
   ``--discover`` flag):
   
   .. code-block:: none
   
      --host=<hostname1><:port>,<hostname2><:port>,<...>

   If you use IPv6 and use the ``<address>:<port>`` format, you must
   enclose the portion of an address and port combination in
   brackets (e.g. ``[<address>]``).

   .. include:: /includes/extracts/uri-used-with-host.rst


.. option:: --port=<port>

   *Default*: 27017

   Specifies the TCP port on which the MongoDB instance listens for
   client connections.
   
   .. include:: /includes/extracts/uri-used-with-port.rst



.. option:: --ssl

   Enables connection to a :binary:`~bin.mongod` or :binary:`~bin.mongos` that has
   TLS/SSL support enabled.
   
   .. include:: /includes/extracts/uri-used-with-ssl.rst

   .. include:: /includes/extracts/ssl-facts-see-more.rst
   


.. option:: --sslCAFile=<filename>

   Specifies the :file:`.pem` file that contains the root certificate chain
   from the Certificate Authority. Specify the file name of the
   :file:`.pem` file using relative or absolute paths.
   
   .. include:: /includes/extracts/uri-used-with-sslcafile.rst

   .. include:: /includes/extracts/ssl-facts-see-more.rst


.. option:: --sslPEMKeyFile=<filename>

   Specifies the :file:`.pem` file that contains both the TLS/SSL certificate
   and key. Specify the file name of the :file:`.pem` file using relative
   or absolute paths.
   
   This option is required when using the :option:`--ssl <mongostat --ssl>` option to connect
   to a :binary:`~bin.mongod` or :binary:`~bin.mongos` that has
   :setting:`~net.ssl.CAFile` enabled *without*
   :setting:`~net.ssl.allowConnectionsWithoutCertificates`.
   
   .. include:: /includes/extracts/uri-used-with-sslpemkeyfile.rst

   .. include:: /includes/extracts/ssl-facts-see-more.rst
   


.. option:: --sslPEMKeyPassword=<value>

   Specifies the password to de-crypt the certificate-key file (i.e.
   :option:`--sslPEMKeyFile <mongostat --sslPEMKeyFile>`). Use the
   :option:`--sslPEMKeyPassword <mongostat --sslPEMKeyPassword>` option
   only if the certificate-key file is encrypted. In all cases, the
   :program:`mongostat` will redact the password from all logging and
   reporting output.
   
   If the private key in the PEM file is encrypted and you do not
   specify the :option:`--sslPEMKeyPassword <mongostat
   --sslPEMKeyPassword>` option, the :program:`mongostat` will prompt
   for a passphrase. See :ref:`ssl-certificate-password`.
   
   .. include:: /includes/extracts/uri-used-with-sslpemkeypassword.rst

   .. include:: /includes/extracts/ssl-facts-see-more.rst


.. option:: --sslCRLFile=<filename>

   Specifies the :file:`.pem` file that contains the Certificate Revocation
   List. Specify the file name of the :file:`.pem` file using relative or
   absolute paths.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst
   


.. option:: --sslAllowInvalidCertificates

   Bypasses the validation checks for server certificates and allows
   the use of invalid certificates. When using the
   :setting:`~net.ssl.allowInvalidCertificates` setting, MongoDB logs as a
   warning the use of the invalid certificate.
   
   .. include:: /includes/extracts/ssl-facts-invalid-cert-warning-clients.rst
   
   .. include:: /includes/extracts/uri-used-with-sslallowinvalidcertificates.rst

   .. include:: /includes/extracts/ssl-facts-see-more.rst
   


.. option:: --sslAllowInvalidHostnames

   Disables the validation of the hostnames in TLS/SSL certificates. Allows
   :program:`mongostat` to connect to MongoDB instances even if the hostname in their
   certificates do not match the specified hostname.
   
   .. include:: /includes/extracts/uri-used-with-sslallowinvalidhostnames.rst
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst


.. option:: --username=<username>, -u=<username>

   Specifies a username with which to authenticate to a MongoDB
   database that uses authentication. Use in conjunction with the
   :option:`--password <mongostat --password>` and
   :option:`--authenticationDatabase <mongostat --authenticationDatabase>` options.

   .. include:: /includes/extracts/uri-used-with-username.rst

   .. include:: /includes/extracts/mongodb-aws-username-mongostat.rst


.. option:: --password=<password>, -p=<password>

   Specifies a password with which to authenticate to a MongoDB
   database that uses authentication. Use in conjunction with the
   :option:`--username <mongostat --username>` and
   :option:`--authenticationDatabase <mongostat
   --authenticationDatabase>` options.

   To prompt the user for the password, pass the :option:`--username
   <mongostat --username>` option without
   :option:`--password <mongostat --password>` or specify an empty
   string as the :option:`--password <mongostat --password>` value, as
   in ``--password=""`` .

   .. include:: /includes/extracts/uri-used-with-password.rst

   .. include:: /includes/extracts/mongodb-aws-password-mongostat.rst


.. option:: --awsSessionToken=<AWS Session Token>

   .. include:: /includes/extracts/mongodb-aws-session-token-mongostat.rst


.. option:: --authenticationDatabase=<dbname>

   Specifies the authentication database where the specified
   :option:`--username <mongostat --username>` has been created. See
   :ref:`user-authentication-database`.
   
   :option:`--authenticationDatabase <mongostat --authenticationDatabase>` is required for :binary:`~bin.mongod`
   and :binary:`~bin.mongos` instances that use :ref:`authentication`.

   .. include:: /includes/fact-auth-database-use-external.rst

   .. include:: /includes/extracts/uri-used-with-authenticationdatabase.rst

.. option:: --authenticationMechanism=<name>

   *Default*: SCRAM-SHA-1

   Specifies the authentication mechanism the :program:`mongostat` instance uses to
   authenticate to the :binary:`~bin.mongod` or :binary:`~bin.mongos`.


   .. versionchanged:: 100.1.0
   
      Starting in version ``100.1.0``, :program:`mongostat` adds support for
      the ``MONGODB-AWS`` authentication mechanism when connecting to a
      `MongoDB Atlas
      <https://www.mongodb.com/cloud/atlas?tck=docs_server>`__ cluster.

   .. include:: /includes/list-table-auth-mechanisms.rst
   
   .. include:: /includes/extracts/uri-used-with-authenticationmechanism.rst


.. option:: --gssapiServiceName=<string>

   Specify the name of the service using :manual:`GSSAPI/Kerberos
   </core/kerberos>`. Only required if the service does not use the
   default name of ``mongodb``.
   
   This option is available only in MongoDB Enterprise.
   


.. option:: --gssapiHostName=<string>

   Specify the hostname of a service using :manual:`GSSAPI/Kerberos
   </core/kerberos>`. *Only* required if the hostname of a machine does
   not match the hostname resolved by DNS.
   
   This option is available only in MongoDB Enterprise.
   


.. option:: --humanReadable=<boolean>

   *Default*: true

   When ``true``, :program:`mongostat` formats dates and quantity values for
   easier reading, as in the following sample output:
   
   .. code-block:: sh
   
      insert query update delete getmore command dirty used flushes vsize  res qrw arw net_in net_out conn                time
         991    *0     *0     *0       0     2|0  3.4% 4.5%       0 2.90G 297M 0|0 0|0  12.9m   84.2k    2 Oct  6 09:45:37.478
         989    *0     *0     *0       0     2|0  3.6% 4.7%       0 2.91G 310M 0|0 0|0  12.9m   84.1k    2 Oct  6 09:45:38.476
         988    *0     *0     *0       0     1|0  3.7% 4.8%       0 2.92G 323M 0|0 0|0  12.8m   83.8k    2 Oct  6 09:45:39.481
         976    *0     *0     *0       0     2|0  3.9% 5.0%       0 2.94G 335M 0|0 0|0  12.7m   83.7k    2 Oct  6 09:45:40.476
   
   When ``false``, :program:`mongostat` returns the raw data, as in the following
   sample output:
   
   .. code-block:: sh
   
      insert query update delete getmore command dirty used flushes      vsize       res qrw arw   net_in net_out conn                      time
         992    *0     *0     *0       0     2|0   1.3  2.4       0 2941255680 149946368 0|0 0|0 12913607   84271    2 2016-10-06T09:45:25-04:00
         989    *0     *0     *0       0     1|0   1.5  2.6       0 2974810112 163577856 0|0 0|0 12873225   84087    2 2016-10-06T09:45:26-04:00
         996    *0     *0     *0       0     1|0   1.6  2.8       0 2972712960 177209344 0|0 0|0 12955423   84345    2 2016-10-06T09:45:27-04:00
         987    *0     *0     *0       0     1|0   1.8  2.9       0 2989490176 190840832 0|0 0|0 12861852   84008    2 2016-10-06T09:45:28-04:00


.. option:: -o=<field list>

   When specified, :program:`mongostat` includes **only** the specified fields
   in the :program:`mongostat` output.
   
   Use dot notation to specify
   :dbcommand:`serverStatus fields <serverStatus>`, as in
   :serverstatus:`metrics.document.inserted`.
   
   To specify a custom name for a field, use ``<field>=<customName>``,
   as in:
   
   .. code-block:: sh
   
      mongostat -o='host=H,time=T,version=MongoDB Version'
   
   :option:`-o` supports the following methods to modify the information
   returned for a given serverStatus field:
   
   .. method:: .rate()
   
      Use :method:`.rate()` to view the rate per second at which a
      serverStatus field is changing from :binary:`~bin.mongostat` call to
      call.
   
      :ref:`ex-mongostat-rate` illustrates how to use
      :binary:`~bin.mongostat` with :option:`-o <mongostat -o>` and the :method:`.rate()`
      method.
   
   .. method:: .diff()
   
      Use :method:`.diff()` to view how much a serverStatus field has
      changed since the previous :binary:`~bin.mongostat` call. The interval
      between calls is specified by ``<sleeptime>``.
   
      :ref:`ex-mongostat-diff` illustrates how to use
      :binary:`~bin.mongostat` with :option:`-o <mongostat -o>` and the :method:`.diff()`
      method.

   :program:`mongostat` supports specifying *either* :option:`-o <mongostat -o>` or :option:`-O <mongostat -O>`:
   you cannot include both options.
   
   See :ref:`ex-mongostat-specify-columns` for an example of
   :option:`-o <mongostat -o>`.


.. option:: -O=<field list>

   When specified, :program:`mongostat` includes the specified
   :dbcommand:`serverStatus` fields after the default :program:`mongostat` output.
   
   Use dot notation to specify
   :dbcommand:`serverStatus fields <serverStatus>`, as in
   :serverstatus:`metrics.document.inserted`.
   
   To specify a custom name for a field, use ``<field>=<customName>``,
   as in:
   
   .. code-block:: sh
   
      mongostat -O=host=H,time=T
   
   :program:`mongostat` supports specifying *either* :option:`-O
   <mongostat -O>` or :option:`-o <mongostat -o>`: you cannot include
   both options.
   
   See :ref:`ex-mongostat-append-columns` for an example of
   :option:`-O <mongostat -O>`.


.. option:: --noheaders

   Disables the output of column or field names.
   


.. option:: --rowcount=<number>, -n=<number>

   Controls the number of rows to output. Use in conjunction with
   the ``sleeptime`` argument to control the duration of a
   :binary:`~bin.mongostat` operation.
   
   Unless :option:`--rowcount <mongostat --rowcount>` is specified, :binary:`~bin.mongostat`
   will return an infinite number of rows (e.g. value of ``0``.)


.. option:: --discover

   Discovers and reports on statistics from all members of a :term:`replica
   set` or :term:`sharded cluster`. When connected to any member of a
   replica set, :option:`--discover <mongostat --discover>` all non-:term:`hidden members <hidden
   member>` of the replica set. When connected to a :binary:`~bin.mongos`,
   :binary:`~bin.mongostat` will return data from all :term:`shards <shard>` in
   the cluster. If a replica set provides a shard in the sharded cluster,
   :binary:`~bin.mongostat` will report on non-hidden members of that replica
   set.
   
   The :option:`mongostat --host` option is not required but
   potentially useful in this case.

   When running with :option:`--discover <mongostat --discover>`,
   :binary:`~bin.mongostat` respects
   :option:`--rowcount <mongostat --rowcount>`.



.. option:: --all

   Configures :binary:`~bin.mongostat` to return all optional :ref:`fields
   <mongostat-fields>`.
   


.. option:: --json

   Returns output for :program:`mongostat` in :term:`JSON` format.


.. option:: --interactive

   Display :program:`mongostat` output in an interactive non-scrolling interface
   rather than the default scrolling output.
   
   :option:`--interactive <mongostat --interactive>` is not available with the :option:`--json <mongostat --json>`
   option.

   See: :ref:`example-mongostat-interactive` for an example of :option:`--interactive <mongostat --interactive>`.


.. option:: <sleeptime>

   *Default*: 1

   The final :program:`mongostat` argument is the length of time, in seconds, that
   :binary:`~bin.mongostat` waits in between calls. By default :binary:`~bin.mongostat`
   returns one call every second.
   
   :binary:`~bin.mongostat` returns values that reflect the operations
   over a 1 second period. For values of ``<sleeptime>`` greater
   than 1, :binary:`~bin.mongostat` averages data to reflect average
   operations per second.


.. _mongostat-fields:

Fields
------

:binary:`~bin.mongostat` returns values that reflect the operations over a
1 second period. When :command:`mongostat <sleeptime>` has a value
greater than 1, :binary:`~bin.mongostat` averages the statistics to reflect
average operations per second.

:binary:`~bin.mongostat` outputs the following fields:

.. describe:: inserts

   The number of objects inserted into the database per second. If
   followed by an asterisk (e.g. ``*``), the datum refers to a
   replicated operation.

.. describe:: query

   The number of query operations per second.

.. describe:: update

   The number of update operations per second.

.. describe:: delete

   The number of delete operations per second.

.. describe:: getmore

   The number of get more (i.e. cursor batch) operations per second.

.. describe:: command

   The number of commands per second. On 
   :term:`secondary` systems, :binary:`~bin.mongostat` presents two values
   separated by a pipe character (e.g. ``|``), in the form of
   ``local|replicated`` commands.

.. describe:: flushes

   For the :ref:`storage-wiredtiger`, ``flushes`` refers to the number
   of WiredTiger checkpoints triggered between each polling interval.


.. describe:: dirty

   Only for :ref:`storage-wiredtiger`. The percentage of the WiredTiger
   cache with dirty bytes, calculated by
   :serverstatus:`wiredTiger.cache.tracked dirty bytes in the cache`
   / :serverstatus:`wiredTiger.cache.maximum bytes configured`.

.. describe:: used

   Only for :ref:`storage-wiredtiger`. The percentage of the WiredTiger
   cache that is in use, calculated by
   :serverstatus:`wiredTiger.cache.bytes currently in the cache` /
   :serverstatus:`wiredTiger.cache.maximum bytes configured`.

.. describe:: vsize

   The amount of virtual memory in megabytes used by the process at
   the time of the last :binary:`~bin.mongostat` call.

.. describe:: res

   The amount of resident memory in megabytes used by the process at
   the time of the last :binary:`~bin.mongostat` call.

.. describe:: locked

   The percent of time in a global write lock. Only appears when
   :binary:`~bin.mongostat` runs against pre-3.0 versions of MongoDB
   instances.

.. describe:: qr

   The length of the queue of clients waiting to read data from the
   MongoDB instance.

.. describe:: qw

   The length of the queue of clients waiting to write data from the
   MongoDB instance.

.. describe:: ar

   The number of active clients performing read operations.

.. describe:: aw

   The number of active clients performing write operations.

.. describe:: netIn

   The amount of network traffic, in *bytes*, received by the MongoDB instance.

   This includes traffic from :binary:`~bin.mongostat` itself.

.. describe:: netOut

   The amount of network traffic, in *bytes*, sent by the MongoDB instance.

   This includes traffic from :binary:`~bin.mongostat` itself.

.. describe:: conn

   The total number of open connections.

.. describe:: set

   The name, if applicable, of the replica set.

.. describe:: repl

   The replication status of the member.

   =========  =========================
   **Value**  **Replication Type**
   ---------  -------------------------
   PRI        :term:`primary`
   SEC        :term:`secondary`
   REC        recovering
   UNK        unknown
   RTR        mongos process ("router")
   ARB        :term:`arbiter`
   =========  =========================

Examples
--------

.. include:: /includes/extracts/require-cmd-line-mongostat.rst

Specify ``mongostat`` Collection Period and Frequency
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the first example, :binary:`~bin.mongostat` will return data every
second for 20 seconds. :binary:`~bin.mongostat` collects data from the
:binary:`~bin.mongod` instance running on the localhost interface on
port 27017. All of the following invocations produce identical
behavior:

.. code-block:: sh

   mongostat --rowcount=20 1
   mongostat --rowcount=20
   mongostat -n=20 1
   mongostat -n=20

In the next example, :binary:`~bin.mongostat` returns data every 5 minutes
(or 300 seconds) for as long as the program runs. :binary:`~bin.mongostat`
collects data from the :binary:`~bin.mongod` instance running on the
localhost interface on port ``27017``. The following
invocations produce identical behavior:

.. code-block:: sh

   mongostat --rowcount=0 300
   mongostat -n=0 300
   mongostat 300

In the following example, :binary:`~bin.mongostat` returns data every 5
minutes for an hour (12 times.) :binary:`~bin.mongostat` collects data
from the :binary:`~bin.mongod` instance running on the localhost interface
on port 27017. The following invocations produce identical
behavior:

.. code-block:: sh

   mongostat --rowcount=12 300
   mongostat -n=12 300

.. _ex-mongostat-append-columns:

Add Fields to :binary:`~bin.mongostat` Output
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:option:`-O <mongostat -O>` allows you to specify fields from
:dbcommand:`serverStatus` output to add to the default
:binary:`~bin.mongostat` output. The following example adds the :serverstatus:`host`
and :serverstatus:`version` fields as well as the :serverstatus:`network.numRequests` field,
which will display as "network requests", to the default
:binary:`~bin.mongostat` output:

.. code-block:: sh

   mongostat -O='host,version,network.numRequests=network requests'

The :binary:`~bin.mongostat` output would then resemble:

.. code-block:: sh

   insert query update delete getmore command dirty used flushes vsize   res qrw arw net_in net_out conn                time            host version network requests
       *0    *0     *0     *0       0     2|0  0.0% 0.0%       0 2.51G 19.0M 0|0 0|0   158b   39.4k    2 Oct 11 12:14:45.878 localhost:37017  3.3.14               91
       *0    *0     *0     *0       0     1|0  0.0% 0.0%       0 2.51G 19.0M 0|0 0|0   157b   39.3k    2 Oct 11 12:14:46.879 localhost:37017  3.3.14               95
       *0    *0     *0     *0       0     1|0  0.0% 0.0%       0 2.51G 19.0M 0|0 0|0   157b   39.2k    2 Oct 11 12:14:47.884 localhost:37017  3.3.14               99

.. _ex-mongostat-specify-columns:

Specify :binary:`~bin.mongostat` Output Fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:option:`-o <mongostat -o>` specifies the columns :binary:`~bin.mongostat` includes in its
output. You can specify any :dbcommand:`serverStatus` field as a
:binary:`~bin.mongostat` output column. The following example specifies the
:serverstatus:`host`, :serverstatus:`time <localTime>`, and  :serverstatus:`metrics.document.inserted` fields:

.. code-block:: sh

   mongostat -o='host,time,metrics.document.inserted'

The :binary:`~bin.mongostat` output would then resemble:

.. code-block:: sh

              host                time metrics.document.inserted
   localhost:37017 Oct 11 12:21:17.370                         0
   localhost:37017 Oct 11 12:21:18.371                         0
   localhost:37017 Oct 11 12:21:19.371                         0
   localhost:37017 Oct 11 12:21:20.368                         0

.. _ex-mongostat-rate:

View Rate of Change for a Field with :method:`.rate()`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:method:`.rate()` enables you to view the rate per second at which a
numerical field has changed from one :binary:`~bin.mongostat` call to the
next. For example, you can view the rate at which documents have been
inserted during an insert operation. :method:`.rate()` can therefore
help you view the performance of your :binary:`~bin.mongod` instance.

The following example reports on the rate of change of the
:serverstatus:`metrics.document.inserted` :dbcommand:`serverStatus` field. The
invocation uses :option:`-o <mongostat -o>`'s ability to specify the name of an column
to label ``metrics.document.inserted.rate()`` as "inserted rate" and
``metrics.document.inserted`` as "inserted":

.. code-block:: sh

   mongostat -o='host,mem,bits,metrics.document.inserted.rate()=inserted rate,metrics.document.inserted=inserted' --rowcount=5

The output would then resemble:

.. code-block:: sh

              host mem.bits inserted rate inserted
   localhost:37017       64           501     3455
   localhost:37017       64           967    13128
   localhost:37017       64           972    22851
   localhost:37017       64           214    25000
   localhost:37017       64             0    25000

.. _ex-mongostat-diff:

View Field Changes with :method:`.diff()`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:method:`.diff()` returns the difference between the current
:dbcommand:`serverStatus` field value and the value from the previous
:binary:`~bin.mongostat` call. The following example returns statistics on
the number of documents being inserted into a collection: ``inserted
diff`` is the difference in the
:serverstatus:`metrics.document.inserted` field between subsequent
calls, while ``inserted`` is the value of
:serverstatus:`metrics.document.inserted`:

.. code-block:: sh

   mongostat -o='host,mem.bits,metrics.document.inserted.diff()=inserted diff,metrics.document.inserted=inserted' --rowcount=5

The output would then resemble:

.. code-block:: sh

              host mem.bits inserted diff inserted
   localhost:27017       64             0    25359
   localhost:27017       64            94    25453
   localhost:27017       64           938    26391
   localhost:27017       64           964    27355
   localhost:27017       64           978    28333

View Statistics for a Replica Set or Sharded Cluster
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In many cases, using the :option:`--discover <mongostat --discover>` option
will help provide a more complete snapshot of the state of an entire
group of machines. If a :binary:`~bin.mongos` process connected to a
:term:`sharded cluster` is running on port ``27017`` of the local
machine, you can use the following form to return statistics from all
members of the cluster:

.. code-block:: sh

   mongostat --discover

.. _example-mongostat-interactive:

View Statistics in an Interactive Interface
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the :option:`--interactive <mongostat --interactive>` option to
view statistics in a non-scrolling `ncurses <https://www.gnu.org/software/ncurses/>`_ -style
interactive output. The :option:`--interactive <mongostat --interactive>` option lets you highlight specific
hosts, columns, or fields to view. When combined with :option:`--discover <mongostat --discover>`,
:option:`--interactive <mongostat --interactive>` displays statistics for all members of a
replica set or sharded cluster, as in the following example:

.. code-block:: sh

   mongostat --discover --interactive

The output for a sharded cluster would then resemble:

.. code-block:: sh

                     host insert query update delete getmore command dirty used flushes mapped vsize   res faults qrw arw net_in net_out conn set repl                time
   hostname.local:27018     *0    *0     *0     *0       0     1|0  0.0% 0.0%       0        3.25G 25.0M    n/a 0|0 1|0   157b   43.9k   19 tic  PRI Nov  2 11:44:46.439
   hostname.local:27019     *0    *0     *0     *0       0     2|0  0.0% 0.0%       0        3.18G 26.0M    n/a 0|0 1|0   322b   44.4k   12 tic  SEC Nov  2 11:44:46.439
   hostname.local:27020     *0    *0     *0     *0       0     2|0  0.0% 0.0%       0        3.18G 26.0M    n/a 0|0 1|0   322b   44.4k   12 tic  SEC Nov  2 11:44:46.439
   hostname.local:27021   2017    *0     *0     *0     826  1029|0  0.0% 0.0%       0        3.25G 31.0M    n/a 0|0 1|0  1.74m   1.60m   20 tac  PRI Nov  2 11:44:46.439
   hostname.local:27022  *2021    *0     *0     *0       0     2|0  0.0% 0.0%       0        3.19G 32.0M    n/a 0|0 1|0   322b   44.6k   12 tac  SEC Nov  2 11:44:46.438
   hostname.local:27023  *2022    *0     *0     *0       0     3|0  0.0% 0.0%       0        3.19G 33.0M    n/a 0|0 1|0   323b   44.7k   12 tac  SEC Nov  2 11:44:46.438
        localhost:27017   2071    *0     *0     *0       0  2073|0                  0     0B 2.43G 9.00M      0 0|0 0|0   249k    130k    4      RTR Nov  2 11:44:47.429
   
   Press '?' to toggle help

.. _mongostat-example-connect-using-aws-iam:

Connect to a MongoDB Atlas Cluster using AWS IAM Credentials
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 100.1.0

To connect to a `MongoDB Atlas
<https://www.mongodb.com/cloud/atlas?tck=docs_server>`__ cluster which
has been configured to support authentication via `AWS IAM credentials
<https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html>`__,
provide a :option:`connection string <mongostat --uri>` to
|tool-binary| similar to the following:

.. code-block:: none

   mongostat 'mongodb+srv://<aws access key id>:<aws secret access key>@cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS' <other options>

Connecting to Atlas using AWS IAM credentials in this manner uses the
``MONGODB-AWS`` :urioption:`authentication mechanism <authMechanism>`
and the ``$external`` :urioption:`authSource`, as shown in this example.

If using an `AWS session token
<https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html>`__,
as well, provide it with the ``AWS_SESSION_TOKEN``
:urioption:`authMechanismProperties` value, as follows:

.. code-block:: none

   mongostat 'mongodb+srv://<aws access key id>:<aws secret access key>@cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS&authMechanismProperties=AWS_SESSION_TOKEN:<aws session token>' <other options>

.. include:: /includes/fact-pct-encode-uri.rst

Alternatively, the AWS access key ID, secret access key, and optionally
session token can each be provided outside of the connection string
using the :option:`--username <mongostat --username>`, :option:`--password <mongostat --password>`, and
:option:`--awsSessionToken` options instead, like so:

.. code-block:: none

   mongostat 'mongodb+srv://cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS' --username <aws access key id> --password <aws secret access key> --awsSessionToken <aws session token> <other options>

When provided as command line parameters, these three options do not
require percent encoding.

You may also set these credentials on your platform using standard
`AWS IAM environment variables
<https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html#envvars-list>`__.
|tool-binary| checks for the following environment variables when you
use the ``MONGODB-AWS``
:urioption:`authentication mechanism <authMechanism>`:

- ``AWS_ACCESS_KEY_ID``
- ``AWS_SECRET_ACCESS_KEY``
- ``AWS_SESSION_TOKEN``

If set, these credentials do not need to be specified in the connection
string or via their explicit options.

.. note::

   If you chose to use the AWS environment variables to specify these
   values, you cannot mix and match with the corresponding explicit or 
   connection string options for these credentials. Either use the
   environment variables for access key ID *and* secret access key
   (*and* session token if used), **or** specify each of these using the
   explicit or connection string options instead.

The following example sets these environment variables in the ``bash``
shell:

.. code-block:: none

   export AWS_ACCESS_KEY_ID='<aws access key id>'
   export AWS_SECRET_ACCESS_KEY='<aws secret access key>'
   export AWS_SESSION_TOKEN='<aws session token>'

Syntax for setting environment variables in other shells will be
different. Consult the documentation for your platform for more
information.

You can verify that these environment variables have been set with the
following command:

.. code-block:: none

   env | grep AWS

Once set, the following example connects to a MongoDB Atlas cluster
using these environment variables:

.. code-block:: none

   mongostat 'mongodb+srv://cluster0.example.com/testdb?authSource=$external&authMechanism=MONGODB-AWS'  <other options>

Additional Information
----------------------

For more information about monitoring MongoDB, see
:manual:`Monitoring for MongoDB</administration/monitoring>`.

For more background on other MongoDB status outputs see:

- :manual:`serverStatus</reference/command/serverStatus>`
- :manual:`replSetGetStatus</reference/command/replSetGetStatus>`
- :manual:`dbStats</reference/command/dbStats>`
- :manual:`collStats</reference/command/collStats>`

For an additional utility that provides MongoDB metrics see
:doc:`/mongotop`.

